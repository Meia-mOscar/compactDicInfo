#ifndef QPUSHBARITEM_H
#define QPUSHBARITEM_H

#include <QApplication>
#include <QTableView>
#include <QStandardItemModel>
#include <QProgressBar>
#include <QStyledItemDelegate>

class MyDelegate : public QStyledItemDelegate
{
public:
    QWidget *createEditor(QWidget *parent, const QStyleOtionViewItem &Option, const QModelIndex &index) const override; //Standard declaration; function overload
    void setEditorData(Qwidget *editor, const QModelIndex &index) const override;
    void setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const;
    void setProgressBarColumn(int column);
private:
   int progressBarColumn;
};

//QStyledItemDelegate::createEditor() -> Create and return an editor widget for the item at a specified index
QWidget MyDelegate::createEditor(QWidget *parent, const QStyleOptionViewItem &Option, const QModelIndex &index) const override
{
    if(index.column() == progressBarColumn) //Check whether correct column for QPushBarItem in table
    {
        QProgressBar *progressBar = new QProgressBar(parent);
        progressBar->setRange(0,100);
        return progressBar;
    }
    else
    {
        return QStyledItemDelegate::createEditor(parent, option, index); //Base class implementation
    }
}

void MyDelegate::setEditorData(QWidget *editor, const QModelIndex index)
{
    if(index.column() == progressBarColumn)
    {
        int value = index.model()->data(index, QTDisplayRole).toInt();
        QProgressBar *progressBar = qobject_cast<QProgressBar*>(editor);
        progressBar->setValue(value);
    }
    else
    {
        QStyledItemDelegate::setEditorData(editor, index);
    }
}

void MyDelegate::setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const
{
    if(index.column() == progressBarColumn)
    {
        QProgressBar *progressBar = qobject_cast<QProgressBar*>(editor);
        int value = progressBar->value();
        model->setData(index, value);
    }
    else
    {
        QStyled
    }
}

void MyDelegate::setProgressBarColumn(int column)
{
    progressBarColumn = column;
}

#endif // QPUSHBARITEM_H

/*
#include <QApplication> #include <QStandardItemModel> #include <QTableView> #include <QProgressBar> #include <QStyledItemDelegate>

class ProgressBarDelegate : public QStyledItemDelegate {
public:
    QWidget *createEditor(QWidget *parent, const QStyleOptionViewItem &option, const QModelIndex &index) const override {
        if (index.column() == progressBarColumn) {
            QProgressBar *progressBar = new QProgressBar(parent);
            progressBar->setRange(0, 100); // Set the range of the progress bar
            return progressBar;
        }
        return QStyledItemDelegate::createEditor(parent, option, index);
    }

    void setEditorData(QWidget *editor, const QModelIndex &index) const override {
        if (index.column() == progressBarColumn) {
            int value = index.model()->data(index, Qt::DisplayRole).toInt();
            QProgressBar *progressBar = qobject_cast<QProgressBar*>(editor);
            progressBar->setValue(value);
        } else {
            QStyledItemDelegate::setEditorData(editor, index);
        }
    }

    void setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const override {
        if (index.column() == progressBarColumn) {
            QProgressBar *progressBar = qobject_cast<QProgressBar*>(editor);
            int value = progressBar->value();
            model->setData(index, value);
        } else {
            QStyledItemDelegate::setModelData(editor, model, index);
        }
    }

    void setProgressBarColumn(int column) {
        progressBarColumn = column;
    }

private:
    int progressBarColumn = -1;
};

*/
